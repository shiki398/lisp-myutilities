[{"pkgName":"cl-user","text":"(mapcar-non-nil #'(lambda (x) x) (list 1 2 3 nil))"},{"pkgName":"cl-user","text":"(remove-if #'null (mapcar #'(lambda (x) x) (list 1 2 3 nil)))"},{"pkgName":"cl-user","text":"(mapcar #'(lambda (x) x) (list 1 2 3 nil))"},{"pkgName":"cl-user","text":"(mapcar-non-nil #'progn (list 1 2 3 nil))"},{"pkgName":"cl-user","text":"(mapcar-non-nil #'+ (list 1 2 3 nil))"},{"pkgName":"cl-user","text":"(mapcar #'+ (list 1 2 3))"},{"pkgName":"cl-user","text":"(mapcar eq (list 1 2 3))"},{"pkgName":"cl-user","text":"(mapcar #'eq (list 1 2 3))"},{"pkgName":"cl-user","text":"(uniq '(1 1 1 1))"},{"pkgName":"cl-user","text":"(remove-duplicates '(1 2 3 4 1 2 3 4))"},{"pkgName":"cl-user","text":"(remove-duplicates '(1 2 3 4))"},{"pkgName":"cl-user","text":"(count '(1 2 3))"},{"pkgName":"cl-user","text":"(size '(1 2 3))"},{"pkgName":"cl-user","text":"(length 1 2 3)"},{"pkgName":"cl-user","text":"(size 1 2 3)"},{"pkgName":"cl-user","text":"(count 1 2 3 )"},{"pkgName":"cl-user","text":"(setf (fdefinition 'count) (fdefinition 'size))"},{"pkgName":"cl-user","text":"(size '(1 2))"},{"pkgName":"cl-user","text":"(count '(1 2 1 2))"},{"pkgName":"cl-user","text":"(size '(1 2 1 2))"},{"pkgName":"cl-user","text":"(length '(1 2 1 2))"},{"pkgName":"cl-user","text":"(length '(1 2))"},{"pkgName":"cl-user","text":"(! #'flatten '(1 2))"},{"pkgName":"cl-user","text":"(assert-t 1)"},{"pkgName":"cl-user","text":"(flatten '())"},{"pkgName":"cl-user","text":"(! #'flatten *x* *y*)"},{"pkgName":"cl-user","text":"*x*"},{"pkgName":"cl-user","text":"(! #'flatten *x*)"},{"pkgName":"cl-user","text":"(! flatten *x*)"},{"pkgName":"cl-user","text":"(flatten *x*)"},{"pkgName":"cl-user","text":"(cons 1 nil)"},{"pkgName":"cl-user","text":"(cons 1 (list 2 3))"},{"pkgName":"cl-user","text":"(cons 1 2)"},{"pkgName":"cl-user","text":"(flatten '(1 2 3 4 '(5 6) 7 8 9))"},{"pkgName":"cl-user","text":"(assert-t nil)"},{"pkgName":"cl-user","text":"(compile-file \"/home/ansible/lisp/git/src/assert/assert.lisp\")"},{"pkgName":"cl-user","text":"(assert-nil nil)"},{"pkgName":"cl-user","text":"(assert-nil 1)"},{"pkgName":"cl-user","text":"(assert-t ())"},{"pkgName":"cl-user","text":"(assert-equal 1 (+ 1 2)) "},{"pkgName":"cl-user","text":"(assert-equal 1 1.0)"},{"pkgName":"cl-user","text":"(assert-equal 1 1.0 #'equalp)"},{"pkgName":"cl-user","text":"((lambda (expect actual)         (progn expect)         (not (null actual))) 1 2)"},{"pkgName":"cl-user","text":"(lambda (expect actual) (progn expect) (not (null actual)) 1 2)"},{"pkgName":"cl-user","text":"(lambda ((expect actual) (progn expect) (not (null actual))) 1 2)"},{"pkgName":"cl-user","text":"(my-assert 1 (+ 1))"},{"pkgName":"cl-user","text":"(my-assert 1 (+ 1 1))"},{"pkgName":"cl-user","text":"exit"},{"pkgName":"cl-user","text":"(assert-equal 1 1)"},{"pkgName":"cl-user","text":"(load-directory-recursively #P\"/home/ansible/lisp/git/\")"},{"pkgName":"cl-user","text":"(load-directory #P\"/home/ansible/lisp/git/src/\")"},{"pkgName":"cl-user","text":"(load-directory #P\"/home/ansible/lisp/git/\")"},{"pkgName":"cl-user","text":"(defun load-directory-recursively (dir)   \"Recursively load all .lisp files under DIR, preferring FASL if available.\"   (dolist (src (directory (merge-pathnames \"**/*.lisp\" dir)))      (load-source-or-fasl src)))"},{"pkgName":"cl-user","text":"(defun load-source-or-fasl (path)   \"Load FASL if available, otherwise load Lisp source.\"   (let* ((source (pathname path))          (fasl (compile-file-pathname source)))     (cond ((probe-file fasl) (load fasl))           ((probe-file source) (load source))           (t (error \"No such file: ~A\" source)))))"},{"pkgName":"cl-user","text":";; FASL があればそちらをロード、なければソースをロード (defun load-source-or-fasl (path)   \"Load FASL if available, otherwise load Lisp source.\"   (let* ((source (pathname path))          (fasl (compile-file-pathname source)))     (cond ((probe-file fasl) (load fasl))           ((probe-file source) (load source))           (t (error \"No such file: ~A\" source)))))"},{"pkgName":"cl-user","text":"(defun load-directory (dir)   \"Load all .lisp files in DIR, preferring FASL if available.\"   (dolist (src (directory (merge-pathnames \"*.lisp\" dir)))     (load-source-or-fasl src)))"},{"pkgName":"cl-user","text":"(compile-file \"/home/ansible/lisp/src/assert/assert.lisp\")"},{"pkgName":"cl-user","text":"(compile-file \"assert.lisp\")"},{"pkgName":"cl-user","text":"(test-test)"},{"pkgName":"cl-user","text":"    (deftest test-test       (assert-t 1)       (assert-nil nil)       (assert-equal 1 1))"},{"pkgName":"cl-user","text":"    (deftest test-test       (assert-t 1)       (assert-nil nil)       (assert-equal 1 1)"},{"pkgName":"cl-user","text":"(assert-nil ()) "},{"pkgName":"cl-user","text":"(assert-t ())   "},{"pkgName":"cl-user","text":"(assert-nil (+ 1))"},{"pkgName":"cl-user","text":"(assert-t 1)                 → NIL"},{"pkgName":"cl-user","text":"(assert-t ())                 → NIL"},{"pkgName":"cl-user","text":"(assert-t '())                 → NIL"},{"pkgName":"cl-user","text":"(assert-equal 1 (+ 1 2))"},{"pkgName":"cl-user","text":"(assert-equal 1 (+ 1))"},{"pkgName":"cl-user","text":"(assert-equal 10 10.0 #'equalp)"},{"pkgName":"cl-user","text":"(assert-equal 10 10.0 #'eq)"},{"pkgName":"cl-user","text":"(assert-equal 10 10.0 #'eql)"},{"pkgName":"cl-user","text":"(assert-equal 10 10.0 #eql)"},{"pkgName":"cl-user","text":"(assert-equal 10 10.0)"},{"pkgName":"cl-user","text":"(assert-equal \"a\" \"a\")"},{"pkgName":"cl-user","text":"(assert-equal 1 \"a\")"},{"pkgName":"cl-user","text":"(my-assert 3 1 #'(lambda (expected actual) (= expected (+ actual 2))))"},{"pkgName":"cl-user","text":"(my-assert 3 (+ 1) #'(lambda (expected actual) (= expected (+ actual 2))))"},{"pkgName":"cl-user","text":"(my-assert 3 (+ 1 2) #'(lambda (expected actual) (= expected (+ actual 2))))"},{"pkgName":"cl-user","text":"(my-assert 1 (+ 1 2) #'(lambda (expected actual) (= expected (+ actual 2))))"},{"pkgName":"cl-user","text":"(macroexpand-1 '(my-assert 1 (+ 1 2) #'(lambda (x) (+ x 2))))"},{"pkgName":"cl-user","text":"(my-assert 1 (+ 1 2) #'(lambda (x) (+ x 2)))"},{"pkgName":"cl-user","text":"((lambda (x) (+ x 2)) 1)"},{"pkgName":"cl-user","text":"(my-assert 1 (+ 1 2) #'((lambda (x) (+ x 2)) 1))"},{"pkgName":"cl-user","text":"(my-assert 1 (+ 1 2) #'(lambda (x) (+ x 2) 1))"},{"pkgName":"cl-user","text":"(my-assert 1 (+ 1 2) #'((lambda (x) (+ x 2) 1)))"},{"pkgName":"cl-user","text":"(my-assert 1 (+ 1 2) #'(lambda (x) (+ x 2)) 1)"},{"pkgName":"cl-user","text":"(my-assert 1 (+ 1 2) #'equal)"},{"pkgName":"cl-user","text":"(my-assert 1 (+ 1 2))"},{"pkgName":"cl-user","text":"(assert-base (+ 1) #'equal 1)"},{"pkgName":"cl-user","text":"(assert-nil (+ 1 2))"},{"pkgName":"cl-user","text":"(assert-nil 'pai)"},{"pkgName":"cl-user","text":"(assert-t (+ 1))"},{"pkgName":"cl-user","text":"(ignore 'test)"},{"pkgName":"cl-user","text":"(ignore 1)"},{"pkgName":"cl-user","text":"((lambda (x) (not (null x))) nil)"},{"pkgName":"cl-user","text":"((lambda (x) (not (null x))) 1)"},{"pkgName":"cl-user","text":"((lambda (x) (+ x 1)) 1)"},{"pkgName":"cl-user","text":"((lambda (x) (not (null) x)) 1)"},{"pkgName":"cl-user","text":"(lambda (x) (not (null) x) 1)"},{"pkgName":"cl-user","text":"(my-assert (+ 1) #'equal 1)"},{"pkgName":"cl-user","text":"(macroexpand-1 '(assert-base (+ 1) #'equal 1))"},{"pkgName":"cl-user","text":"(macroexpand-1 '(assert-base ((+ 1) #'equal 1)))"},{"pkgName":"cl-user","text":"(macroexpand-1 '(my-assert 1 (+ 1)))"},{"pkgName":"cl-user","text":"(macroexpand-1 '(my-assert 1 (+1)))"},{"pkgName":"cl-user","text":"(assert-t (not (+ 1 2)))"},{"pkgName":"cl-user","text":"(assert-t (+ 1 2))"},{"pkgName":"cl-user","text":"(+ 1)"},{"pkgName":"cl-user","text":"(not (+ 1))"},{"pkgName":"cl-user","text":"(assert-equal 1 (+ 1 2 3))"},{"pkgName":"cl-user","text":"(assert-t (+ 1 2 3))"},{"pkgName":"cl-user","text":"(macroexpand-1 '(deftest test-test (my-assert 1 (+ 1 2))))"},{"pkgName":"cl-user","text":"(eval (list 1 2 3))"},{"pkgName":"cl-user","text":"(eval '(1 2 3))"},{"pkgName":"cl-user","text":"(eval '())"},{"pkgName":"cl-user","text":"(eval (+ 1 2))"},{"pkgName":"cl-user","text":"(eval '(my-assert 1 (+ 1)))"},{"pkgName":"cl-user","text":"(eval (list (my-assert 1 (+ 1))))"},{"pkgName":"cl-user","text":"(macroexpand-1 '(defun test-name ()   (my-assert 1 (+ 1))))"},{"pkgName":"cl-user","text":"(test-name2)"},{"pkgName":"cl-user","text":"(test-name)"},{"pkgName":"cl-user","text":"(deftest test-test (my-assert 1 (+ 1)))"},{"pkgName":"cl-user","text":"(deftest (my-assert 1 (+ 1)))"},{"pkgName":"cl-user","text":"(macroexpand-1 '(deftest (my-assert 1 (+ 1))))"},{"pkgName":"cl-user","text":"(and 1 a)"},{"pkgName":"cl-user","text":"(and nil a)"},{"pkgName":"cl-user","text":"(and 1 nil)"},{"pkgName":"cl-user","text":"(my-assert 6 (+ 1 2 3 4 ))"},{"pkgName":"cl-user","text":"(my-assert 6 (+ 1 2 3))"},{"pkgName":"cl-user","text":"(my-assert 6 (+ 1 2 ))"}]